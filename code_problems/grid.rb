# Parse input text file in place.

grid = ["XXXXXXXXXXXXX*X*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
	 			"XXXXXXXX*XXXXXXXXXXXXXXXXXXXXXXXXXXXXX*XXX*XXXX*XX",
	 			"XXXXXXXXXXXXXXXX*XXXXXXXX*XXXXXXXXXXXXXXXXXXXXXXXX",
	 			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
	 			"XXX*XXXXXXXXXXXXX**XXX*XX*XX*XX*XXXXXXXXXXXXXXXXXX",
	 			"XXXXXXXXXXX*XXXX*XXXXXXXX*XXXXXXXXXX*XXXXXX*XXXXXX",
	 			"XXXXXXXX*XXXXXXXXXXXXX*XXXXX*XXXXX*X**XXXXXXXXXXXX",
	 			"XXXXXXXXXXXX*XXXXXXXXXXXXXXXXXXXXXXXXXXXX*X*XXXXXX",
	 			"XXXX*XXXXXXXX*XXXXXXX**XXXX**XXXXXXXXXXXXXXXXXXXXX",
	 			"**XXXXXXXXXX*XXXXXX*XXXXXXXXXXX*XXXXXXXXXXXXXXXXX*",
	 			"XXXXXXXXXXXXXXXXXX*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
	 			"XXXXXX*XXXXXXXXXXXX*XXXXXXXXXX*XXXXXXXXXXXXXXXXXXX",
	 			"*XXXXXXXXXXXXXXXXXXXX**XX***XX*XXXXXXXXXXXXX*XXXXX",
	 			"XXXXXXXXXXX*XXX**XX*X*XXXX*XXX*X*XXX*XXXXX*XXXXXXX",
	 			"XXXXXXXXXXXXX*XXXXXXXXXX*XXXXX*XXXXXXXXX*XXXXXXXXX",
	 			"XXXXXXXXXXXXXXXXX*XXXXX*XXX*XXXX*XXXXXXXXX*XXXXXXX",
	 			"XXXXXXXX*X*XXXXXXX*XXXXXXXXXXXXXXX*X*XXXX*XX*XXXXX",
	 			"XXXXXXXXX*X*XXXXX*XXXXXX**XXXXXXXXXX*XX*XXXXXXX*XX",
	 			"XXXXXXXXXXXXXXXX**XX*XX*XXXXXXXXXXXXXX*XXXXXXXXXXX",
	 			"XXXXXXX**XXX*XXXXXXXXXXXXX*XXXXXXXXXXXXXX*XXXXXXXX",
	 			"XXXX*XXX*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
	 			"XXXXXXXXX*XXXXXXXXX**XXXXX*XXXXXXXXXX*XXXXXX*XXXXX",
	 			"XXXXXX*XXX**XXXXXXXXXX*XX*XXX*XXXXXXXXXXXX*XXXXXXX",
	 			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
	 			"XXXX*XXXXXX*XX*XXXXXXX***XXXXXXXXXXXXXXXXXXXX*XXXX",
	 			"XX**XXXXXXXXXXXXXXXX**X*XXXXX*XXXXXXXXX*XXXXXXXXXX",
	 			"*X*XXXXXXXX**X*XXXXXXXXX*XXXXXXXXXXX*XXXXXXXXXXXXX",
	 			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
	 			"*XXXXXXX*XXXXXXXXXXXXX**XXXXXXX*XXXX*XXX*XXXXXXXXX",
	 			"X*XXXXXXXXXXX*XXXXXX*XXXXXXX**X*XX*XXXXXXXXXXXXXX*",
	 			"XXXXXXXXXXXXXXXXXX**XXXXXXXXXXX*XXXXXXXXX*XX*X*XXX",
	 			"XXXXXXXXX*XXXXXXXXX*XXXXXXXXXXXXXX*XXXXXXXX*XX*X*X",
	 			"XXXXXXXXXXXXXXXXXX*XXXX*XXX*XXXX*XXXXXXXXXXX*XXX*X",
	 			"XXXXXXXXXXX*XXXXX*XXXXXX*XXX*XXXXXXXXXXXXXXXXXXXXX",
	 			"X*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX**XXXXXXX",
	 			"XXXXXXXXX*X*XXXX*XXXXXXXXXXXXXXXXXXXXXXXXX*X*XXXXX",
	 			"XXX*XXXXXXXXXXXXX*XXXXXXXXXXX*XXXXXXXXXXXXXXXXXXXX",
	 			"XXXXXXXXXX*XX*XXXX*XXXXXXXXXXXXX*XXXXX*X*XXXX*XXXX",
	 			"X*XX*XXX*X*XXXXXXXXXXXXXXXXXXXX*XXXXXXXXXXXXXXXXXX",
	 			"XXXXXXXXXX*XXXXXXXXXXXXXXXXXXXXXXXX*XXXXXX**XXXXXX",
	 			"**XXXXXXXXXXX*XXXXXXXXXXXXX*XXXXXXXXXXXX*XXXXX*XXX",
	 			"X*XXXXXXXXXXXXXXXXXXXXXXXXXXXX*XX**XXXXX*XXXXXXXXX",
	 			"XXXXXXXXXXXXXX*XXX*XXXXXXXXX*XXXXXXXX**XXXXXXX*XXX",
	 			"XXXXXXXXXX*XXXXXXXXXXXXXXX*X*XXXXXXXXXXXXXXXX*XXXX",
	 			"XXXXXXXXXXX*XXXX*XXXXXXXXXXXX*XXXX*XXXXXXXXX*XXXXX",
	 			"XXXXXXXXXXXXX*XXXXXXXXXXXXX*XXXX*XXXX*XXXXXXXXXXXX",
	 			"XXXXXXXXXXX*XXXXX*XXXXXXXXXXXX*XXXXXXXXXXXX*XXXX*X",
	 			"XXXXXXX*XXXXXXXXXXXXXXXX*XX*XXXXXXXX*XXXXXXXXXXXXX",
	 			"XXXXXX*XXX*XXXXXXXXXXXXXXXXXXXXXXXXXX*XXXXXXX*XXXX",
	 			"XXXXX*XXXXXXXX*XXXXX*X*XXXXXXXXXXXXX*XX*XXXXXXX**X"
	 		 ].collect{|row| row.split("")}

def factorial(num)
	num <= 0 ? 1 : (1..num).inject(:*)
end

# Find all valid permutations (n choose k)
def n_choose_k(n,k)
	factorial(n) / factorial(n-k)
end

# Compute valid permutations in column or row.
def find_permutations(line)
	count = line.count("*")
	count >= 5 ? n_choose_k(count,5) : 0
end

# Scan given grid and find all line combinations. 
def scan_grid(grid)
	grid.collect {|line| find_permutations(line) }.inject(:+)
end


############
# SOLUTION #
############

valid_row = scan_grid(grid)						# Compute count for original rows.
valid_col = scan_grid(grid.transpose)	# Transpose makes columns into rows.

puts "\nValid row permutations = #{valid_row}"
puts "Valid col permutations = #{valid_col}"

puts "\nTotal valid card permutations = #{valid_row + valid_col}\n\n"